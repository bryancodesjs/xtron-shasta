{"version":3,"sources":["assets/img/xtronlong.png","Utils/Utils.js","Common/ToastContainerCust.js","Components/Registration/Registration.js"],"names":["utils","tronWeb","contract","setTronWeb","at","ToastContainerCust","autoClose","position","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","ReactGA","initialize","pageview","window","location","pathname","search","Registration","props","lang","state","history","useHistory","useState","backOfficeID","SetBackOfficeID","loggedIn","setLoggedIn","isModalOpen","SetisModalOpen","installed","settronWeb","id","useParams","CustomToastWithLink","useEffect","a","Promise","resolve","tronWebState","ready","tries","timer","setInterval","TRONGRID_API","process","REACT_APP_NETWORK","TronWeb","clearInterval","Utils","registationSubmit","warnmsg","localStorage","removeItem","undefined","toast","warn","hideProgressBar","pauseOnHover","draggable","progress","idToAddress","call","tronAdd","address","fromHex","registrationExt","send","feeLimit","callValue","shouldPollResponse","push","event","category","action","reload","console","log","error","className","src","xtronLogo","alt","to","style","width","active","type","value","onChange","e","target","readOnly","onClick","disabled"],"mappings":"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","file":"static/js/2.afbdedaa.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/xtronlong.12848e6d.png\";","// const contract_address = \"TF46MbUFEDZm1Q6yi8FWa1FkqPLC3QGDMZ\"\r\n\r\n// const contract_address = \"TLaXfyrdGqQWjYMWVC1KQBYwZvuYwVtJXE\"\r\n\r\n// const contract_address = \"TFp4R6eG3EMHvPEfKCMUs29p5VLiaN8fdd\"\r\n\r\n// const contract_address = \"TTpGpJ1JN75ioXm8k1LhCWFEQqGbptyzAF\"\r\n\r\n//xtron-real\r\n//const contract_address = \"TWDECXnA4oAGrDYRNS7ex1izx3Mgys9SRp\"\r\n\r\n//xtron-shasta\r\nconst contract_address = \"TQrmGowd3HkCJrHNgDwNAsqSyfkKj6mFXc\"\r\n\r\n//.env\r\n//const contract_address = process.env.REACT_APP_CONTRACT_ADDRESS\r\n\r\nconst utils = {\r\n    tronWeb: false,\r\n    contract: false,\r\n\r\n    async setTronWeb(tronWeb) {\r\n        this.tronWeb = tronWeb;\r\n        this.contract = await tronWeb.contract().at(contract_address)\r\n    },\r\n\r\n};\r\n\r\nexport default utils;","import React from 'react'\r\nimport { ToastContainer } from 'react-toastify';\r\n\r\n\r\nfunction ToastContainerCust({ autoClose = 3000 }) {\r\n    return (\r\n        <ToastContainer\r\n            position=\"top-center\"\r\n            autoClose={autoClose}\r\n            newestOnTop={false}\r\n            closeOnClick\r\n            rtl={false}\r\n            pauseOnFocusLoss\r\n        />\r\n    )\r\n}\r\n\r\nexport default ToastContainerCust\r\n","import React, { useEffect, useState } from 'react'\r\nimport xtronLogo from '../../assets/img/xtronlong.png'\r\nimport { Link, useHistory, useParams } from 'react-router-dom';\r\nimport TronWeb from 'tronweb'\r\nimport { toast } from 'react-toastify';\r\nimport { FaExclamationCircle, FaSignInAlt } from \"react-icons/fa\";\r\nimport ToastContainerCust from '../../Common/ToastContainerCust'\r\nimport Utils from '../../Utils/Utils'\r\nimport { MyClockLoader } from '../../Common/Loader'\r\nimport ReactGA from 'react-ga';\r\nReactGA.initialize('G-6MQ8JWRM63'); /*Unique Google Analytics ID*/\r\nReactGA.pageview(window.location.pathname + window.location.search);\r\n\r\n\r\nfunction Registration(props) {\r\n    const lang = props.location && props.location.state\r\n    const history = useHistory();\r\n    const [backOfficeID, SetBackOfficeID] = useState('')\r\n    const [loggedIn, setLoggedIn] = useState(false)\r\n    const [isModalOpen, SetisModalOpen] = useState(false)\r\n    const [tronWeb, settronWeb] = useState({\r\n        installed: false,\r\n        loggedIn: false\r\n    })\r\n    const { id } = useParams();\r\n    const CustomToastWithLink = () => (\r\n        <p>\r\n            Please login to your Tronlink account\r\n        </p>\r\n    );\r\n\r\n    useEffect(async () => {\r\n        await new Promise(resolve => {\r\n            const tronWebState = {\r\n                installed: !!window.tronWeb,\r\n                loggedIn: window.tronWeb && window.tronWeb.ready\r\n            };\r\n\r\n            if (tronWebState.installed) {\r\n                settronWeb(tronWebState)\r\n                return resolve();\r\n            }\r\n            let tries = 0;\r\n            const timer = setInterval(() => {\r\n                if (tries >= 10) {\r\n                    const TRONGRID_API = process.env.REACT_APP_NETWORK;\r\n                    window.tronWeb = new TronWeb(\r\n                        TRONGRID_API,\r\n                        TRONGRID_API,\r\n                        TRONGRID_API\r\n                    );\r\n                    settronWeb({\r\n                        installed: false,\r\n                        loggedIn: false\r\n                    });\r\n                    clearInterval(timer);\r\n                    return resolve();\r\n                }\r\n                tronWebState.installed = !!window.tronWeb;\r\n                tronWebState.loggedIn = window.tronWeb && window.tronWeb.ready;\r\n                if (!tronWebState.installed) {\r\n                    return tries++;\r\n                }\r\n                else {\r\n                    clearInterval(timer);\r\n                }\r\n                settronWeb(tronWebState)\r\n\r\n                resolve();\r\n            }, 100);\r\n        })\r\n        await Utils.setTronWeb(window.tronWeb);\r\n        setLoggedIn(true)\r\n    }, []);\r\n\r\n    const registationSubmit = async () => {\r\n        let warnmsg = \"Porfavor no actualice la p√°gina y espere mientras su pago es procesado. Esto puede tardar unos minutos.\"\r\n\r\n        localStorage.removeItem('backOfficeID')\r\n        if (backOfficeID !== '' || id !== undefined) {\r\n            if (loggedIn) {\r\n                try {\r\n                    SetisModalOpen(true)\r\n                    if (lang === 'English') {\r\n                        warnmsg = \"Please do not refresh the page and wait while your payment is processed. This may take a few minutes.\"\r\n                    }\r\n                    toast.warn(warnmsg, {\r\n                        position: \"top-center\",\r\n                        autoClose: 5000,\r\n                        hideProgressBar: false,\r\n                        closeOnClick: true,\r\n                        pauseOnHover: false,\r\n                        draggable: true,\r\n                        progress: undefined,\r\n                    });\r\n                    const idToAddress = await Utils.contract.idToAddress(backOfficeID).call();\r\n                    const tronAdd = TronWeb.address.fromHex(idToAddress)\r\n                    await Utils.contract.registrationExt(tronAdd).send({\r\n                        feeLimit: 100000000,\r\n                        callValue: 440000000,\r\n                        shouldPollResponse: true\r\n                    });\r\n                    SetisModalOpen(false)\r\n                    history.push({\r\n                        pathname: \"/back-office-main\",\r\n                        state: { lang: lang }\r\n                    })\r\n                    ReactGA.event({\r\n                        category: 'User',\r\n                        action: 'Successful Registration'\r\n                      });\r\n                    window.location.reload(false);\r\n                } catch (error) {\r\n                    SetisModalOpen(false)\r\n                    console.log(error)\r\n                    toast.error(\"error\", error)\r\n                }\r\n            }\r\n            else {\r\n                toast.error(CustomToastWithLink)\r\n            }\r\n        }\r\n        else {\r\n            if (lang === 'English') {\r\n                toast.warn(\"Enter your sponsor's ID\")\r\n            }\r\n            else {\r\n                toast.warn(\"Ingrese el ID de su patrocinador\")\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"\" id=\"backofficewrap\">\r\n            <ToastContainerCust />\r\n            <div className=\"container\">\r\n                <div className=\"text-center logo-payment-wrap\">\r\n                    {\r\n                        isModalOpen ?\r\n                            <div className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </div> :\r\n                            <Link to={{\r\n                                pathname: \"/\",\r\n                                state: lang\r\n                            }} className=\"logo-payment-link\">\r\n                                <img className=\"logo-payment\" src={xtronLogo} alt=\"logo xtron\" />\r\n                            </Link>\r\n                    }\r\n\r\n                </div>\r\n                <div className=\"row \" id=\"\">\r\n                    <div className=\"registration-main\" style={{ width: \"100%\" }}>\r\n                        <div className=\"xwrap\">\r\n                            <div className=\"text-center registration-items\">\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h2>Registration Area</h2>\r\n                                        :\r\n                                        <h2>√Årea de registro</h2>\r\n                                }\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4>If you don't have a sponsor, use 1</h4>\r\n                                        :\r\n                                        <h4>Si no tiene un patrocinador, use 1</h4>\r\n                                }\r\n\r\n\r\n                                <MyClockLoader active={isModalOpen} />\r\n                                {id ?\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={id} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} readOnly />\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"registration-input\">\r\n                                        <input type=\"text\" value={backOfficeID} className=\"sponsor-input-box text-center\" onChange={(e) => SetBackOfficeID(e.target.value)} />\r\n                                    </div>\r\n                                }\r\n                                <div className=\"registration-btn\">\r\n                                    <button className=\"btn btn-success custombtn\" onClick={() => registationSubmit()} disabled={isModalOpen} >{lang === 'English' ? \"REGISTER\" : \"REGISTRO\"}</button>\r\n                                </div>\r\n                                {\r\n                                    lang === 'English' ?\r\n                                        <h4><FaExclamationCircle /> Please confirm your sponsor's ID before making a payment.</h4>\r\n                                        :\r\n                                        <h4><FaExclamationCircle /> Verifique el ID de su patrocinador antes de realizar un pago.</h4>\r\n                                }\r\n                                <div className=\"h20\"></div>\r\n                                {\r\n                                    isModalOpen ? <span><h4><FaSignInAlt /> Login</h4></span> : <Link to={{ pathname: \"/login\", state: lang }}><h4><FaSignInAlt /> Login</h4></Link>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Registration\r\n"],"sourceRoot":""}